---
import BaseLayout from "src/layouts/BaseLayout.astro";
import CTA from "@components/CTA.astro";
import FAQ from "@components/FAQ.astro";
import { getCollection } from "astro:content";

// Optimize our landing image and pass it as props to the BaseLayout (for preloading) and Landing (for rendering)
import {getOptimizedImage,getOptimizedCardImage} from "@js/utils"
import landingImage from "@assets/images/hero.webp" // <-- THE PATH TO THE ASSET YOU WANT TO PRELOAD - The asset must live in src
import Hero from "@components/Hero-ecom-carousel.astro";
// import Hero from "@components/Hero.astro";
import Products from "@components/Products.vue";


import '@shoelace-style/shoelace/dist/components/button/button.js';

const optimizedImage = await getOptimizedImage(landingImage)

const products = await getCollection("clothing");
const productsProcessedImages = await processProductImages(products)


async function processProductImages(products) {
  // Input validation
  if (!Array.isArray(products)) {
    throw new TypeError('Products must be an array');
  }
  
  const processedImages = {};
  
  try {
    // Use Promise.all to properly wait for all async operations to complete
    await Promise.all(
      products.map(async ({ id, data }) => {
        if (!id || !data?.image) {
          console.warn(`Skipping product with invalid data: ${id}`);
          return;
        }
        
        try {
          // Optimize the main image
          const optimizedMainImage = await getOptimizedCardImage(data.image);
          
          // Store the optimized image in the result object
          processedImages[id] = {
            image: optimizedMainImage
          };
        } catch (imageError) {
          console.error(`Failed to optimize image for product ${id}:`, imageError);
          // Store a placeholder or fallback for failed images
          processedImages[id] = {
            image: null,
            error: 'Image optimization failed'
          };
        }
      })
    );
    
    return processedImages;
  } catch (error) {
    console.error('Error processing product images:', error);
    throw new Error('Failed to process product images: ' + error.message);
  }
}

// Flag to track if data is ready
const dataIsReady = products && productsProcessedImages;





---



<BaseLayout
  title="Page d'accueil"
  description="Majd Studios Template"
  preloadedImage = {optimizedImage}
>

<Hero />

<!-- products -->
{dataIsReady ? (
  <Products 
    client:only="vue" 
    products={products} 
    productImages={productsProcessedImages} 
    isSection={true} 
  />
) : (
  <div class="loading-state">Loading products...</div>
)}



 
  <!-- ============================================ -->
  <!--                    FAQ                       -->
  <!-- ============================================ -->
<!-- <FAQ /> -->



</BaseLayout>



<style lang="less">
  



</style>

---
import BaseLayout from "src/layouts/BaseLayout.astro";
import CTA from "@components/CTA.astro";
import FAQ from "@components/FAQ.astro";
import { getCollection } from "astro:content";

// Optimize our landing image and pass it as props to the BaseLayout (for preloading) and Landing (for rendering)
import {getOptimizedImage,getOptimizedCardImage} from "@js/utils"
import landingImage from "@assets/images/hero.webp" // <-- THE PATH TO THE ASSET YOU WANT TO PRELOAD - The asset must live in src
import Hero from "@components/Hero-ecom-carousel.astro";
// import Hero from "@components/Hero.astro";
import Products from "@components/Products.vue";
import Cart from "@components/Cart.vue";
import '@shoelace-style/shoelace/dist/components/button/button.js';

const optimizedImage = await getOptimizedImage(landingImage)

const products = await getCollection("products");
const productsProcessedImages = await processProductImages(products)

//  product </ kayn


/**
 * Processes and optimizes images for a collection of products
 * @param {Array} products - Array of product objects, each containing id and data.image
 * @returns {Promise<Object>} Object mapping product IDs to their optimized images
 * @throws {Error} If image optimization fails
 */

async function processProductImages(products) {
  // Input validation
  if (!Array.isArray(products)) {
    throw new TypeError('Products must be an array');
  }
  
  const processedImages = {};
  
  try {
    // Use Promise.all to properly wait for all async operations to complete
    await Promise.all(
      products.map(async ({ id, data }) => {
        if (!id || !data?.image) {
          console.warn(`Skipping product with invalid data: ${id}`);
          return;
        }
        
        try {
          // Optimize the main image
          const optimizedMainImage = await getOptimizedCardImage(data.image);
          
          // Store the optimized image in the result object
          processedImages[id] = {
            image: optimizedMainImage
          };
        } catch (imageError) {
          console.error(`Failed to optimize image for product ${id}:`, imageError);
          // Store a placeholder or fallback for failed images
          processedImages[id] = {
            image: null,
            error: 'Image optimization failed'
          };
        }
      })
    );
    
    return processedImages;
  } catch (error) {
    console.error('Error processing product images:', error);
    throw new Error('Failed to process product images: ' + error.message);
  }
}

// Flag to track if data is ready
const dataIsReady = products && productsProcessedImages;





---



<BaseLayout
  title="Page d'accueil"
  description="Sidi Bel Abbès Solutions Informatiques : Réparation PC, optimisation système & consulting IT. +17 ans d'expérience ! Service rapide et fiable. Vente matériel, conseils d'experts et plus ! Appelez le (0770662425) ou visitez-nous !"
  preloadedImage = {optimizedImage}
>

<Hero />
<Cart client:only />

<!-- products -->
{dataIsReady ? (
  <Products 
    client:only="vue" 
    products={products} 
    productImages={productsProcessedImages} 
    isSection={true} 
  />
) : (
  <div class="loading-state">Loading products...</div>
)}

<div class="center">
  <sl-button class="button" variant="neutral" size="large" href="/Produits">
    ...Découvrir plus 
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 48 48">
      <defs>
        <mask id="ipSRightC0">
          <g fill="none" stroke-linejoin="round" stroke-width="4">
            <path fill="#fff" stroke="#fff" d="M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4S4 12.954 4 24s8.954 20 20 20Z" />
            <path stroke="#000" stroke-linecap="round" d="m21 33l9-9l-9-9" />
          </g>
        </mask>
      </defs>
      <path fill="white" d="M0 0h48v48H0z" mask="url(#ipSRightC0)" />
    </svg>
    
  </sl-button>
</div>

 
  <!-- ============================================ -->
  <!--                    FAQ                       -->
  <!-- ============================================ -->
  <FAQ />



</BaseLayout>



<style lang="less">
  

  .center{
    padding-top: 12px;
    display: flex;
    justify-content: center;
  }
  .button::part(base){
    border: none;
    background-color: var(--primary);
  }
  .button::part(label) {
    display: flex;
    align-items: center;
    gap: 8px;
  }


  body.dark-mode{
    .button::part(base){
    background-color: var(--medium);
  }
  }


</style>

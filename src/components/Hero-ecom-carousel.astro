---
// No server-side logic needed for this component example
---

<section id="hero" class="hero-container">
    <sl-carousel
        id="hero-carousel"  
        class="carousel-container"
        pagination
        mouse-dragging
        loop

    >
        {/* Carousel items and SVGs remain exactly the same as in your provided code */}
        <sl-carousel-item>
            <img alt="White T-shirt" src="https://images.squarespace-cdn.com/content/v1/5ed6e10fb011a123217ba702/1727139534806-K219WNSVFLFTG6QOO2I3/unsplash-image-164_6wVEHfI.jpg"/>
        </sl-carousel-item>
        <sl-carousel-item>
            <img alt="Person folding clothes" src="https://images.unsplash.com/photo-1543087903-1ac2ec7aa8c5?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8Y2xvdGhpbmd8ZW58MHx8MHx8fDA%3D"/>
        </sl-carousel-item>
        <sl-carousel-item>
            <img alt="Clothes on hangers" src="https://images.unsplash.com/photo-1588099768531-a72d4a198538?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fGNsb3RoaW5nfGVufDB8fDB8fHww"/>
        </sl-carousel-item>
        <sl-carousel-item>
            <img alt="Baby clothes" src="https://images.unsplash.com/photo-1516762689617-e1cffcef479d?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8Y2xvdGhpbmd8ZW58MHx8MHx8fDA%3D"/>
        </sl-carousel-item>
        <sl-carousel-item>
            <img alt="Clothes rack" src="https://images.unsplash.com/photo-1470770903676-69b98201ea1c?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"/>
        </sl-carousel-item>

        <div class="carousel-swiper-container">
            <button class="carousel-swiper left" aria-label="Previous slide">
                 <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" focusable="false" aria-hidden="true"><path fill="currentColor" d="M14.414 5.586a2 2 0 0 0-2.828 0L5.171 12l6.415 6.414c.39.391.902.586 1.414.586s1.024-.195 1.414-.586a2 2 0 0 0 0-2.828L10.829 12l3.585-3.586a2 2 0 0 0 0-2.828" /></svg>
            </button>
            <button class="carousel-swiper right" aria-label="Next slide">
                 <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" focusable="false" aria-hidden="true"><path fill="currentColor" d="M8.586 5.586a2 2 0 0 0 0 2.828L12.171 12l-3.585 3.586a2 2 0 1 0 2.828 2.828L17.829 12l-6.415-6.414a2 2 0 0 0-2.828 0" /></svg>
            </button>
        </div>
    </sl-carousel>
</section>

{/* Shoelace import script - unchanged */}
<script>
    import '@shoelace-style/shoelace/dist/components/carousel/carousel.js';
    import '@shoelace-style/shoelace/dist/components/carousel-item/carousel-item.js';
</script>

{/* Client-side interaction script - MODIFIED for cooldown */}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Define the expected type for the Shoelace Carousel element
        type SlCarouselElement = HTMLElement & {
            previous: () => void;
            next: () => void;
            // Include other methods/properties if needed later
        };

        const carousel = document.querySelector<SlCarouselElement>('#hero-carousel');
        const prevButton = carousel?.querySelector<HTMLButtonElement>('.carousel-swiper.left');
        const nextButton = carousel?.querySelector<HTMLButtonElement>('.carousel-swiper.right');

        // Check if elements exist
        if (carousel && prevButton && nextButton) {
            let isCoolingDown = false; // Flag to track cooldown state
            const cooldownDuration = 300; // Cooldown time in milliseconds

            // Function to handle the cooldown logic
            const startCooldown = () => {
                if (isCoolingDown == true) return
                    
                isCoolingDown = true;
                // Optionally disable buttons visually during cooldown
                prevButton.disabled = true;
                nextButton.disabled = true;

                setTimeout(() => {
                    isCoolingDown = false;
                    // Re-enable buttons after cooldown
                    prevButton.disabled = false;
                    nextButton.disabled = false;
                }, cooldownDuration);
            };

            // Previous Button Click Listener
            prevButton.addEventListener('click', () => {
                // Only proceed if not currently in cooldown
                if (isCoolingDown) {
                    return;
                }

                // Check if the method exists before calling
                if (typeof carousel.previous === 'function') {
                    carousel.previous();
                    startCooldown(); // Start cooldown after action
                } else {
                    console.warn('sl-carousel .previous() method not found.');
                }
            });

            // Next Button Click Listener
            nextButton.addEventListener('click', () => {
                // Only proceed if not currently in cooldown
                if (isCoolingDown) {
                    return;
                }

                // Check if the method exists before calling
                 if (typeof carousel.next === 'function') {
                    carousel.next();
                    startCooldown(); // Start cooldown after action
                } else {
                     console.warn('sl-carousel .next() method not found.');
                }
            });

            console.log('Custom carousel controls with cooldown attached to #hero-carousel.');

        } else {
            // Log error if elements couldn't be found
            console.error('Could not find the carousel or its navigation buttons for cooldown setup.');
            // Specific logs remain the same as before...
            if (!carousel) console.error('Carousel element (#hero-carousel) not found.');
            if (!prevButton) console.error('Previous button (.carousel-swiper.left) not found within #hero-carousel.');
            if (!nextButton) console.error('Next button (.carousel-swiper.right) not found within #hero-carousel.');
        }
    });
</script>

{/* Styles - unchanged */}
<style lang="less">
/* Mobile - 360px */
@media only screen and (min-width: 0rem) {
    .hero-container {
        background-color: #f0f0f0;
        display: grid;
        place-items: center;
        position: relative;
        margin-bottom: 1em;
        padding-bottom: 1em;
        padding-top: clamp(6.5rem, 12.95vw, 6.75rem);
        z-index: 1;
        isolation: isolate;
        text-align: center;
        color: white;
    }

    sl-carousel#hero-carousel {
        width: 100%;
        max-height: 400px;
    }

    sl-carousel#hero-carousel sl-carousel-item {
        border: 1px solid violet;

        overflow: hidden;

    }
    sl-carousel#hero-carousel sl-carousel-item img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .carousel-swiper-container {
        position: absolute;
        bottom: 10px;
        right: 10px;
        display: flex;
        gap: 5px;
        z-index: 2;
    }

    .carousel-swiper-container .carousel-swiper {
        --size: 35px;
        background-color: rgba(28, 28, 28, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        padding: 0;
        cursor: pointer;
        flex: 0 0 auto;
        width: var(--size);
        height: var(--size);
        display: grid;
        place-items: center;
        transition: background-color 0.2s ease, opacity 0.2s ease;
    }

    .carousel-swiper-container .carousel-swiper:hover,
    .carousel-swiper-container .carousel-swiper:focus-visible {
        background-color: rgba(28, 28, 28, 0.9);
        opacity: 1;
        outline: 2px solid dodgerblue;
        outline-offset: 2px;
    }

    .carousel-swiper-container .carousel-swiper:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    } /* Style for disabled state */

    .carousel-swiper-container .carousel-swiper svg {
        display: block;
        width: 60%;
        height: 60%;
    }
}

/* Tablet - 768px */
@media only screen and (min-width: 48rem) {
    sl-carousel#hero-carousel {
        height: 500px !important;

        &::part(base){
        height: 100% !important;

        }

    }

    .carousel-swiper-container {
        bottom: 15px;
        right: 15px;
    }

    .carousel-swiper-container .carousel-swiper {
        --size: 45px;
    }
}
</style>